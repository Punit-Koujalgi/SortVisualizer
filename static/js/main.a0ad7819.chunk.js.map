{"version":3,"sources":["algorithms/utilities.js","algorithms/SelectionSort.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","algorithms/QuickSort3.js","algorithms/HeapSort.js","utilities/Constants.js","utilities/ArrayFunctions.js","components/Navbar.js","utilities/visualStates.js","components/Parts/Bar.js","components/SortChart.js","components/Parts/constants.js","components/Parts/Button.js","components/VisualizerControls.js","components/Parts/ProgressBar.js","components/ColorKey.js","components/SortInfo.js","components/Visualizer.js","App.js","reportWebVitals.js","index.js"],"names":["newTrace","array","groupA","groupB","groupC","groupD","sortedIndices","addToTrace","trace","push","lastSorted","length","swap","i","j","tmp","createRange","start","end","Array","keys","map","elem","createKey","SelectionSortKey","SelectionSortDesc","title","description","href","target","rel","worstCase","avgCase","bestCase","space","SelectionSort","nums","minIndex","BubbleSortKey","BubbleSortDesc","BubbleSort","InsertionSortKey","InsertionSortDesc","InsertionSort","value","hole","MergeSortKey","MergeSortDesc","MergeSort","recursiveMergeSort","original","midPoint","Math","floor","mid","left","slice","right","k","merge","QuickSortKey","QuickSortDesc","QuickSort","recursiveQuickSort","pivot","random","choosePivot","partition","QuickSort3Key","QuickSort3Desc","QuickSort3","recursiveQuickSort3","pivot_elements","pivotStart","pivotEnd","HeapSortKey","ALGORITHM","maxHeapify","heapsize","leftChild","rightChild","largest","BuildMaxHeap","heapSort","ALGORITHM_KEY","ALGORITHM_DESC","initialState","initialTraceState","traceStep","initialVisualState","originalArray","generateRandomArray","size","fill","max","createTrace","sort","numbers","Navbar","props","algoHandle","event","onAlgorithmChange","innerHTML","sizeHandle","Number","document","getElementById","style","width","onArraySizeChange","id","className","type","algo","onClick","arraySize","onRandomize","resetVisualState","resetTraceState","traceArray","clearTimeoutIds","timeoutIds","forEach","clearTimeout","Bar","height","val","stateA","stateB","stateC","stateD","sorted","classNames","BarStyle","getListOfBars","maxNum","num","includes","margin","marginRight","SortChart","CSS_CLASSES","renderIcon","icon","iconClass","ICON","Button","raised","unelevated","outlined","dense","notCased","disabled","children","rootClass","ClassMappings","userClassName","Object","buildClassNames","VisualizerControls","useEffect","playing","playDisabled","traceState","forwardDisabled","backwardDisabled","repeatDisabled","playblackHandler","speed","onAdjustSpeed","Repeat","onRepeat","Backward","onBackward","Pause","Play","onPause","onRun","onContinue","Forward","onForward","playbackSpeed","toString","ProgressBar","ColorKey","keySorted","keyA","keyB","keyC","keyD","SortInfo","Visualizer","useState","setPlaybackSpeed","visualState","setVisualState","setTrace","settimeoutIds","changeVisualState","item","prevVisualState","run","timer","console","log","timeoutId","setTimeout","prevTrace","pause","continuation","step","playSpeed","split","colorKey","desc","App","setArraySize","setArray","setAlgo","newArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.a0ad7819.chunk.js","sourcesContent":["export const newTrace = (array) => {\r\n  return [\r\n    {\r\n      array: [...array],\r\n      groupA: [],\r\n      groupB: [],\r\n      groupC: [],\r\n      groupD: [],\r\n      sortedIndices: [],\r\n    },\r\n  ];\r\n};\r\n\r\nexport const addToTrace = (\r\n  trace,\r\n  array,\r\n  sortedIndices = [],\r\n  groupA = [],\r\n  groupB = [],\r\n  groupC = [],\r\n  groupD = []\r\n) => {\r\n  trace.push({\r\n    array: [...array],\r\n    groupA: [...groupA],\r\n    groupB: [...groupB],\r\n    groupC: [...groupC],\r\n    groupD: [...groupD],\r\n    sortedIndices: [...sortedIndices],\r\n  });\r\n};\r\n\r\nexport const lastSorted = (trace) => {\r\n  return trace[trace.length - 1].sortedIndices;\r\n};\r\n\r\nexport const swap = (array, i, j) => {\r\n  const tmp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = tmp;\r\n};\r\n\r\nexport const createRange = (start, end) => {\r\n  return [...Array(end - start).keys()].map((elem) => elem + start);\r\n};\r\n\r\nexport const createKey = (groupA, groupB, groupC, groupD) => {\r\n  return { groupA, groupB, groupC, groupD };\r\n};\r\n","import React from \"react\";\r\nimport { swap, newTrace, addToTrace, lastSorted, createKey } from \"./utilities\";\r\n\r\nconst SelectionSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  // Core Algorithm\r\n  for (let i = 0; i < nums.length - 1; i++) {\r\n    // Internal Loop: Find index of min value\r\n    let minIndex = i;\r\n    for (let j = i + 1; j < nums.length; j++) {\r\n      // Visualize: comparing A[j] to A[minIndex]\r\n      addToTrace(trace, nums, lastSorted(trace), [minIndex, j]);\r\n      if (nums[j] < nums[minIndex]) {\r\n        // Visualize: discovered new minIndex\r\n        addToTrace(trace, nums, lastSorted(trace), [minIndex], [j]);\r\n        minIndex = j;\r\n        // Visualize: reassign new minIndex;\r\n        addToTrace(trace, nums, lastSorted(trace), [minIndex], [j]);\r\n      }\r\n    }\r\n\r\n    // Visualize: i'th value to be swapped with min value\r\n    addToTrace(trace, nums, lastSorted(trace), [], [i, minIndex]);\r\n\r\n    swap(nums, i, minIndex);\r\n\r\n    // Visualize: i'th value has been swapped with min value\r\n    addToTrace(trace, nums, [...lastSorted(trace), i], [], []);\r\n  }\r\n\r\n  // Visualize: Final item in the array is sorted\r\n  addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1]);\r\n\r\n  return trace;\r\n};\r\n\r\nexport const SelectionSortKey = createKey(\"Comparing\", \"Swapping\");\r\n\r\nexport const SelectionSortDesc = {\r\n  title: \"Selection Sort\",\r\n  description: (\r\n    <p>\r\n      <a\r\n        href=\"https://en.wikipedia.org/wiki/Selection_sort\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\">\r\n        Selection Sort\r\n      </a>{\" \"}\r\n      is an in-place comparison sorting algorithm that divides the input list\r\n      into two parts: the sublist of items already sorted, which is built up\r\n      from left to right at the front (left) of the list, and the sublist of\r\n      items remaining to be sorted that occupy the rest of the list. Initially,\r\n      the sorted sublist is empty and the unsorted sublist is the entire input\r\n      list. The algorithm proceeds by finding the smallest element in the\r\n      unsorted sublist, exchanging (swapping) it with the leftmost unsorted\r\n      element (putting it in sorted order), and moving the sublist boundaries\r\n      one element to the right.\r\n    </p>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  space: <span>O(1)</span>,\r\n};\r\n\r\nexport default SelectionSort;\r\n","import React from \"react\";\r\nimport { swap, newTrace, addToTrace, lastSorted, createKey } from \"./utilities\";\r\n\r\nconst BubbleSort = (nums) => {\r\n  // Set up code for tracing the algorithm\r\n  const trace = newTrace(nums);\r\n\r\n  // Sorting Algorithm with trace capture\r\n  for (let i = 0; i < nums.length; i++) {\r\n    for (let j = 0; j < nums.length - i - 1; j++) {\r\n      // Visualize: Comparing A[j] and A[j + 1]\r\n      addToTrace(trace, nums, lastSorted(trace), [j, j + 1]);\r\n      if (nums[j] > nums[j + 1]) {\r\n        swap(nums, j, j + 1);\r\n        // Visualize: Swap A[j] and A[j + 1]\r\n        addToTrace(trace, nums, lastSorted(trace), [], [j, j + 1]);\r\n      }\r\n    }\r\n\r\n    // Visualize: final value is sorted\r\n    addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1 - i]);\r\n  }\r\n\r\n  return trace;\r\n};\r\n\r\nexport const BubbleSortKey = createKey(\"Comparing\", \"Swapping\");\r\nexport const BubbleSortDesc = {\r\n  title: \"Bubble Sort\",\r\n  description: (\r\n    <p>\r\n      <a\r\n        href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\">\r\n        Bubble Sort\r\n      </a>{\" \"}\r\n      is a simple sorting algorithm that repeatedly steps through the list,\r\n      compares adjacent elements and swaps them if they are in the wrong\r\n      order.The pass through the list is repeated until the list is sorted. The\r\n      algorithm, which is a comparison sort, is named for the way smaller or\r\n      larger elements \"bubble\" to the top of the list. Although the algorithm is\r\n      simple, it is too slow and impractical for most problems\r\n    </p>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: <span>O(n)</span>,\r\n  space: <span>O(1)</span>,\r\n};\r\nexport default BubbleSort;\r\n","import React from \"react\";\r\nimport { newTrace, addToTrace, createKey } from \"./utilities\";\r\n\r\nconst InsertionSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  // Core Algorithm\r\n  for (let i = 1; i < nums.length; i++) {\r\n    let value = nums[i];\r\n    let hole = i;\r\n    // Visualize: Hole has been selected for comparison\r\n    addToTrace(trace, nums, [], [i]);\r\n    while (hole > 0 && nums[hole - 1] > value) {\r\n      // Visualize: Compare hole to value\r\n      addToTrace(trace, nums, [], [hole], [hole - 1]);\r\n      nums[hole] = nums[hole - 1];\r\n      hole -= 1;\r\n      // Visualize: Overwrite hole with hole - 1\r\n      addToTrace(trace, nums, [], [], [hole, hole + 1]);\r\n    }\r\n    // Visualize: Overwrite hole with value\r\n    addToTrace(trace, nums, [], [], [], [hole]);\r\n    nums[hole] = value;\r\n    // Visualize: value is in sorted position\r\n    addToTrace(trace, nums, [], [], [], [hole]);\r\n  }\r\n\r\n  // Visualize: Mark all elements as sorted\r\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\r\n  return trace;\r\n};\r\n\r\nexport const InsertionSortKey = createKey(\r\n  \"Comparing\",\r\n  \"Swapping\",\r\n  \"Overwrite from memory\"\r\n);\r\nexport const InsertionSortDesc = {\r\n  title: \"Insertion Sort\",\r\n  description: (\r\n    <p>\r\n      <a\r\n        href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\">\r\n        Insertion Sort\r\n      </a>{\" \"}\r\n      is a simple sorting algorithm that iterates through an array and at each\r\n      iteration it removes one element from the array, finds the location it\r\n      belongs to in the sorted list and inserts it there, repeating until no\r\n      elements remain in the unsorted list. It is an in-place, stable sorting\r\n      algorithm that is inefficient on large input arrays but works well for\r\n      data sets that are almost sorted. It is more efficient in practice\r\n      compared to other quadratic sorting algorithms like bubble sort and\r\n      selection sort.\r\n    </p>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: <span>O(n)</span>,\r\n  space: <span>O(1)</span>,\r\n};\r\n\r\nexport default InsertionSort;\r\n","import React from \"react\";\r\nimport { newTrace, addToTrace, createKey } from \"./utilities\";\r\n\r\nconst MergeSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  function merge(original, start, mid, end) {\r\n    const left = original.slice(start, mid);\r\n    const right = original.slice(mid, end);\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = 0;\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i] <= right[j]) {\r\n        addToTrace(trace, original, [], [], [], [k + start]);\r\n        original[k + start] = left[i];\r\n        i++;\r\n        addToTrace(trace, original, [], [], [], [k + start]);\r\n      } else {\r\n        addToTrace(trace, original, [], [], [], [k + start]);\r\n        original[k + start] = right[j];\r\n        j++;\r\n        addToTrace(trace, original, [], [], [], [k + start]);\r\n      }\r\n      k++;\r\n    }\r\n    while (i < left.length) {\r\n      addToTrace(trace, original, [], [], [], [k + start]);\r\n      original[k + start] = left[i];\r\n      i++;\r\n      k++;\r\n      addToTrace(trace, original, [], [], [], [k + start]);\r\n    }\r\n    while (j < right.length) {\r\n      addToTrace(trace, original, [], [], [], [k + start]);\r\n      original[k + start] = right[j];\r\n      j++;\r\n      k++;\r\n      addToTrace(trace, original, [], [], [], [k + start]);\r\n    }\r\n\r\n    left.length = 0;\r\n    right.length = 0;\r\n  }\r\n\r\n  function recursiveMergeSort(original, start, end) {\r\n    const length = end - start;\r\n    if (length < 2) {\r\n      // original = []\r\n      if (length < 1) return original;\r\n      // original = [x]\r\n      else return [original[start]];\r\n    }\r\n\r\n    const midPoint = Math.floor((start + end) / 2);\r\n\r\n    // Visualize: First Half\r\n    addToTrace(\r\n      trace,\r\n      original,\r\n      [],\r\n      [...Array(midPoint - start).keys()].map((i) => i + start)\r\n    );\r\n    recursiveMergeSort(original, start, midPoint);\r\n\r\n    // Visualize: Second Half\r\n    addToTrace(\r\n      trace,\r\n      original,\r\n      [],\r\n      [...Array(end - midPoint).keys()].map((i) => i + midPoint)\r\n    );\r\n    recursiveMergeSort(original, midPoint, end);\r\n\r\n    merge(original, start, midPoint, end);\r\n  }\r\n\r\n  recursiveMergeSort(nums, 0, nums.length);\r\n\r\n  // Visualize: Mark all elements as sorted\r\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\r\n  return trace;\r\n};\r\n\r\nexport const MergeSortKey = createKey(\r\n  \"Call Merge Sort\",\r\n  null,\r\n  \"Overwrite from axillary array\"\r\n);\r\nexport const MergeSortDesc = {\r\n  title: \"Merge Sort\",\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Merge_sort\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">\r\n          Merge Sort\r\n        </a>{\" \"}\r\n        is an efficient, stable sorting algorith that makes use of the divide\r\n        and conquer strategy. Conceptually the algorithm works as follows:\r\n      </p>\r\n      <ol>\r\n        <li>\r\n          Divide the unsorted list into <em>n</em> sublists, each containing one\r\n          element(a list of one element is considered sorted)\r\n        </li>\r\n        <li>\r\n          Repeatedly merge sublists to produce new sorted sublists until there\r\n          is only one sublist remaining. This will be the sorted list.\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  space: (\r\n    <span>\r\n      O(<em>n</em>)\r\n    </span>\r\n  ),\r\n};\r\nexport default MergeSort;\r\n","import React from \"react\";\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  lastSorted,\r\n  createRange,\r\n  createKey,\r\n} from \"./utilities\";\r\n\r\nconst QuickSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  function choosePivot(array, start, end) {\r\n    // randomly pick an element between start and end;\r\n    return Math.floor(Math.random() * (end - start)) + start;\r\n  }\r\n\r\n  function partition(array, start, end) {\r\n    let i = start + 1;\r\n    let j = start + 1;\r\n\r\n    // Visualize: Keep pivot marked\r\n    addToTrace(trace, array, lastSorted(trace), [start]);\r\n\r\n    while (j <= end) {\r\n      if (array[j] < array[start]) {\r\n        // Visualize: Mark item that is less than pivot\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start],\r\n          [j],\r\n          [],\r\n          createRange(start + 1, i)\r\n        );\r\n\r\n        swap(array, i, j);\r\n\r\n        // Visualize: Move item to lesser list\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start],\r\n          [i],\r\n          [],\r\n          createRange(start + 1, i)\r\n        );\r\n        i += 1;\r\n      }\r\n      j += 1;\r\n    }\r\n\r\n    // Visualize: Mark center position\r\n    addToTrace(\r\n      trace,\r\n      array,\r\n      lastSorted(trace),\r\n      [i - 1],\r\n      [],\r\n      [],\r\n      createRange(start, i - 1)\r\n    );\r\n    swap(array, start, i - 1);\r\n\r\n    // Visualize: Move pivot to center\r\n    addToTrace(\r\n      trace,\r\n      array,\r\n      lastSorted(trace),\r\n      [i - 1],\r\n      [],\r\n      [],\r\n      createRange(start, i - 1)\r\n    );\r\n    return i - 1;\r\n  }\r\n\r\n  function recursiveQuickSort(array, start, end) {\r\n    if (start >= end) {\r\n      if (start === end) {\r\n        // Visualize: Mark only item as sorted\r\n        addToTrace(trace, array, [...lastSorted(trace), start]);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    let pivot = choosePivot(array, start, end);\r\n\r\n    // Visualize: Mark chosen pivot\r\n    addToTrace(trace, array, lastSorted(trace), [pivot]);\r\n\r\n    swap(array, start, pivot);\r\n\r\n    // Visualize: Move chosen pivot to start\r\n    addToTrace(trace, array, lastSorted(trace), [pivot]);\r\n\r\n    pivot = partition(array, start, end);\r\n\r\n    // Visualize: Mark pivot after partition as sorted\r\n    addToTrace(trace, array, [...lastSorted(trace), pivot]);\r\n\r\n    recursiveQuickSort(array, start, pivot - 1);\r\n    recursiveQuickSort(array, pivot + 1, end);\r\n  }\r\n\r\n  recursiveQuickSort(nums, 0, nums.length - 1);\r\n\r\n  return trace;\r\n};\r\n\r\nexport const QuickSortKey = createKey(\r\n  \"Comparing\",\r\n  \"Swapping\",\r\n  null,\r\n  \"Less than pivot\"\r\n);\r\n\r\nexport const QuickSortDesc = {\r\n  title: \"Quick Sort\",\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Quicksort\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">\r\n          Quick Sort\r\n        </a>{\" \"}\r\n        is an efficient, in-place sorting algorith that in practice is faster\r\n        than MergeSort and HeapSort. However, it is not a stable sorting\r\n        algorithm, meaning that the relative positioning of equal sort items is\r\n        not preserved.Quicksort is a divide and conquer algorithm. Quicksort\r\n        first divides a large array into two smaller sub-arrays: the low\r\n        elements and the high elements. Quicksort can then recursively sort the\r\n        sub-arrays. The steps are:\r\n      </p>\r\n      <ol>\r\n        <li>\r\n          Pick an element, called a pivot, from the array. This is usually done\r\n          at random.\r\n        </li>\r\n        <li>Move pivot element to the start of the array.</li>\r\n        <li>\r\n          <em>Partitioning:</em> reorder the array so that all elements with\r\n          values less than the pivot come before the pivot, while all elements\r\n          with values greater than the pivot come after it (equal values can go\r\n          either way). After this partitioning, the pivot is in its final\r\n          position. This is called the <em>partition</em> operation.\r\n        </li>\r\n        <li>\r\n          Recursively apply the above steps to the sub-array of elements with\r\n          smaller values and separately to the sub-array of elements with\r\n          greater values.\r\n        </li>\r\n      </ol>\r\n      <p>\r\n        The base case of the recursion is an array of size zero or one, which\r\n        are sorted by definition.\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em>\r\n      <sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em>log<em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em>log<em>n</em>)\r\n    </span>\r\n  ),\r\n  space: (\r\n    <span>\r\n      O(log<em>n</em>)\r\n    </span>\r\n  ),\r\n};\r\n\r\nexport default QuickSort;\r\n","import React from \"react\";\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  lastSorted,\r\n  createRange,\r\n  createKey,\r\n} from \"./utilities\";\r\n\r\nconst QuickSort3 = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  function choosePivot(array, start, end) {\r\n    // randomly pick an element between start and end;\r\n    return Math.floor(Math.random() * (end - start)) + start;\r\n  }\r\n\r\n  function partition(array, start, end) {\r\n    const pivot = array[start];\r\n    let i = start + 1;\r\n    let j = start + 1;\r\n    let k = start + 1;\r\n    // Between k and end : uncheked\r\n    // Between start and i : equal to pivot\r\n    // Between i and j : less than pivot\r\n    // Between j and k : greater than pivot\r\n\r\n    // Visualize: Keep pivot marked\r\n    addToTrace(trace, array, lastSorted(trace), [start]);\r\n\r\n    while (k < end) {\r\n      if (array[k] === pivot) {\r\n        // Visualize: Mark item that is equal to pivot\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start, ...createRange(start, i)],\r\n          [k],\r\n          [],\r\n          createRange(i, j)\r\n        );\r\n\r\n        swap(array, i, k);\r\n\r\n        // Visualize: Mark item that is equal to pivot\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start, ...createRange(start, i)],\r\n          [i],\r\n          [],\r\n          createRange(i, j)\r\n        );\r\n\r\n        if (j > i) swap(array, j, k);\r\n        i += 1;\r\n        j += 1;\r\n      } else if (array[k] < pivot) {\r\n        // Visualize: Mark item that is less than pivot\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start, ...createRange(start, i)],\r\n          [k],\r\n          [],\r\n          createRange(i, j)\r\n        );\r\n\r\n        swap(array, j, k);\r\n\r\n        // Visualize: Move item to lesser list\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start, ...createRange(start, i)],\r\n          [j],\r\n          [],\r\n          createRange(i, j)\r\n        );\r\n\r\n        j += 1;\r\n      }\r\n      k += 1;\r\n    }\r\n\r\n    const pivot_elements = i - start;\r\n    i -= 1;\r\n    j -= 1;\r\n    while (i >= start) {\r\n      swap(array, i, j);\r\n      i -= 1;\r\n      j -= 1;\r\n    }\r\n\r\n    // Visualize: Move pivot_elements to center\r\n    addToTrace(\r\n      trace,\r\n      array,\r\n      lastSorted(trace),\r\n      createRange(j + 1, j + 1 + pivot_elements),\r\n      [],\r\n      [],\r\n      createRange(start, j + 1)\r\n    );\r\n    return [j + 1, j + 1 + pivot_elements];\r\n  }\r\n\r\n  function recursiveQuickSort3(array, start, end) {\r\n    if (start >= end - 1) {\r\n      if (start === end - 1) {\r\n        // Visualize: Mark only item as sorted\r\n        addToTrace(trace, array, [...lastSorted(trace), start]);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    let pivot = choosePivot(array, start, end);\r\n\r\n    // Visualize: Mark chosen pivot\r\n    addToTrace(trace, array, lastSorted(trace), [pivot]);\r\n\r\n    swap(array, start, pivot);\r\n\r\n    // Visualize: Move chosen pivot to start\r\n    addToTrace(trace, array, lastSorted(trace), [pivot]);\r\n\r\n    let [pivotStart, pivotEnd] = partition(array, start, end);\r\n\r\n    // Visualize: Mark pivot after partition as sorted\r\n    addToTrace(trace, array, [\r\n      ...lastSorted(trace),\r\n      ...createRange(pivotStart, pivotEnd),\r\n    ]);\r\n\r\n    recursiveQuickSort3(array, start, pivotStart);\r\n    recursiveQuickSort3(array, pivotEnd, end);\r\n  }\r\n\r\n  recursiveQuickSort3(nums, 0, nums.length);\r\n\r\n  return trace;\r\n};\r\n\r\nexport const QuickSort3Key = createKey(\r\n  \"Comparing\",\r\n  \"Swapping\",\r\n  null,\r\n  \"Less than pivot\"\r\n);\r\n\r\nexport const QuickSort3Desc = {\r\n  title: \"Quick Sort 3-Way Partitioning\",\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Quicksort#Repeated_elements\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">\r\n          Quick Sort\r\n        </a>{\" \"}\r\n        exhibits poor performance on arrays that contain many repeated elements.\r\n        This issue (\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Dutch_national_flag_problem\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">\r\n          Dutch national flag problem\r\n        </a>\r\n        ) can be solved by using an alternative linear-time partitioning routine\r\n        that separates the values into three groups: values less than the pivot,\r\n        values equal to the pivot, and values greater than the pivot. The values\r\n        equal to the pivot are already sorted, so only the less-than and\r\n        greater-than partitions need to be recursively sorted.\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em>\r\n      <sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em>)\r\n    </span>\r\n  ),\r\n  space: (\r\n    <span>\r\n      O(log <em>n</em>)\r\n    </span>\r\n  ),\r\n};\r\n\r\nexport default QuickSort3;\r\n","import React from \"react\";\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  lastSorted,\r\n  createRange,\r\n  createKey,\r\n} from \"./utilities\";\r\n\r\nconst HeapSort = (nums) => {\r\n  const trace = newTrace(nums);\r\n\r\n  // Helper functions to quickly access nodes\r\n  const left = (i) => 2 * i + 1;\r\n  const right = (i) => 2 * i + 2;\r\n  const parent = (i) => Math.floor((i - 1) / 2);\r\n\r\n  const maxHeapify = (array, i, heapsize) => {\r\n    const leftChild = left(i);\r\n    const rightChild = right(i);\r\n\r\n    // Visualize: Compare parent and leftChild\r\n    addToTrace(trace, array, lastSorted(trace), [i, leftChild]);\r\n\r\n    let largest =\r\n      leftChild < heapsize && array[leftChild] > array[i] ? leftChild : i;\r\n\r\n    // Visualize: Compare largest and rightChild\r\n    addToTrace(trace, array, lastSorted(trace), [largest, rightChild]);\r\n\r\n    if (rightChild < heapsize && array[rightChild] > array[largest])\r\n      largest = rightChild;\r\n\r\n    if (largest !== i) {\r\n      // Visualize: Select largest child and parent\r\n      addToTrace(trace, array, lastSorted(trace), [], [i, largest]);\r\n\r\n      swap(array, i, largest);\r\n\r\n      // Visualize: Swap largest child and parent\r\n      addToTrace(trace, array, lastSorted(trace), [], [i, largest]);\r\n\r\n      maxHeapify(array, largest, heapsize);\r\n    }\r\n  };\r\n\r\n  const BuildMaxHeap = (array) => {\r\n    const start = Math.floor(array.length / 2);\r\n    const heapsize = array.length;\r\n    for (let i = start; i >= 0; i--) {\r\n      maxHeapify(array, i, heapsize);\r\n    }\r\n\r\n    // Visualize: Mark heap as built\r\n    addToTrace(\r\n      trace,\r\n      array,\r\n      lastSorted(trace),\r\n      [],\r\n      [],\r\n      [],\r\n      createRange(0, array.length)\r\n    );\r\n  };\r\n\r\n  const heapSort = (array) => {\r\n    BuildMaxHeap(array);\r\n    let heapsize = array.length;\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      // Visualize: Select Maximum\r\n      addToTrace(trace, array, lastSorted(trace), [], [0, i]);\r\n\r\n      swap(array, 0, i);\r\n      heapsize -= 1;\r\n\r\n      // Visualize: Swap with last element in heap\r\n      addToTrace(trace, array, [...lastSorted(trace), i], [], [0, i]);\r\n\r\n      maxHeapify(array, 0, heapsize);\r\n\r\n      // Visualize: Heap created\r\n      addToTrace(\r\n        trace,\r\n        array,\r\n        lastSorted(trace),\r\n        [],\r\n        [],\r\n        [],\r\n        createRange(0, heapsize)\r\n      );\r\n    }\r\n    addToTrace(trace, array, [...lastSorted(trace), 0]);\r\n  };\r\n\r\n  // Execute Heapsort\r\n  heapSort(nums);\r\n  return trace;\r\n};\r\n\r\nexport const HeapSortKey = createKey(\r\n  \"Comparing\",\r\n  \"Swapping\",\r\n  null,\r\n  \"Heap Built\"\r\n);\r\n\r\nexport const HeapSortDesc = {\r\n  title: \"Heap Sort\",\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Heapsort\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">\r\n          Heap Sort\r\n        </a>{\" \"}\r\n        can be thought of as an improved selection sort that uses the heap data\r\n        structure rather than a linear-time search to find the maximum or\r\n        minimum element. It is an in-place sorting algorithm that is not stable\r\n        and has a somewhat slower running time than Quicksort in practice.\r\n      </p>\r\n      <p>\r\n        The heapsort algorithm can be divided into two parts. In the first step,\r\n        a heap is built out of the data. The heap is often placed in an array\r\n        with the layout of a complete binary tree. In the second step, a sorted\r\n        array is created by repeatedly removing the largest element from the\r\n        heap (the root of the heap), and inserting it into the array. The heap\r\n        is updated after each removal to maintain the heap property. Once all\r\n        objects have been removed from the heap, the result is a sorted array.\r\n      </p>\r\n      <ol>\r\n        <li>\r\n          Call the buildMaxHeap() function on the list. Also referred to as\r\n          heapify(), this builds a heap from a list in O(n) operations.\r\n        </li>\r\n        <li>\r\n          Swap the first element of the list with the final element. Decrease\r\n          the considered range of the list by one.\r\n        </li>\r\n        <li>\r\n          Call the <em>siftDown()</em>, also called <em>maxHeapify()</em>{\" \"}\r\n          function on the list to sift the new first element to its appropriate\r\n          index in the heap.\r\n        </li>\r\n        <li>\r\n          Go to step (2) unless the considered range of the list is one element.\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  space: <span>O(1)</span>,\r\n};\r\n\r\nexport default HeapSort;\r\n","import SelectionSort, {\r\n  SelectionSortKey,\r\n  SelectionSortDesc,\r\n} from \"../algorithms/SelectionSort\";\r\n\r\nimport BubbleSort, {\r\n  BubbleSortKey,\r\n  BubbleSortDesc,\r\n} from \"../algorithms/BubbleSort\";\r\n\r\nimport InsertionSort, {\r\n  InsertionSortKey,\r\n  InsertionSortDesc,\r\n} from \"../algorithms/InsertionSort\";\r\nimport MergeSort, {\r\n  MergeSortKey,\r\n  MergeSortDesc,\r\n} from \"../algorithms/MergeSort\";\r\nimport QuickSort, {\r\n  QuickSortKey,\r\n  QuickSortDesc,\r\n} from \"../algorithms/QuickSort\";\r\nimport QuickSort3, {\r\n  QuickSort3Key,\r\n  QuickSort3Desc,\r\n} from \"../algorithms/QuickSort3\";\r\nimport HeapSort, { HeapSortKey, HeapSortDesc } from \"../algorithms/HeapSort\";\r\n\r\nexport const ALGORITHM = {\r\n  \"Selection Sort\": SelectionSort,\r\n  \"Bubble Sort\": BubbleSort,\r\n  \"Insertion Sort\": InsertionSort,\r\n  \"Merge Sort\": MergeSort,\r\n  \"Quick Sort\": QuickSort,\r\n  \"Quick Sort 3\": QuickSort3,\r\n  \"Heap Sort\": HeapSort,\r\n};\r\n\r\nexport const ALGORITHM_KEY = {\r\n  \"Selection Sort\": SelectionSortKey,\r\n  \"Bubble Sort\": BubbleSortKey,\r\n  \"Insertion Sort\": InsertionSortKey,\r\n  \"Merge Sort\": MergeSortKey,\r\n  \"Quick Sort\": QuickSortKey,\r\n  \"Quick Sort 3\": QuickSort3Key,\r\n  \"Heap Sort\": HeapSortKey,\r\n};\r\n\r\nexport const ALGORITHM_DESC = {\r\n  \"Selection Sort\": SelectionSortDesc,\r\n  \"Bubble Sort\": BubbleSortDesc,\r\n  \"Insertion Sort\": InsertionSortDesc,\r\n  \"Merge Sort\": MergeSortDesc,\r\n  \"Quick Sort\": QuickSortDesc,\r\n  \"Quick Sort 3\": QuickSort3Desc,\r\n  \"Heap Sort\": HeapSortDesc,\r\n};\r\n\r\nexport const initialState = {\r\n  array: [],\r\n  arraySize: 10,\r\n  trace: [],\r\n  algorithm: null,\r\n};\r\n\r\nexport const initialTraceState = {\r\n  trace: [],\r\n  traceStep: -1,\r\n};\r\n\r\nexport const initialVisualState = {\r\n  originalArray: [],\r\n  array: [],\r\n  groupA: [],\r\n  groupB: [],\r\n  groupC: [],\r\n  groupD: [],\r\n  sortedIndices: [],\r\n};\r\n","export const generateRandomArray = (size) => {\r\n  function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max)) + 1;\r\n  }\r\n\r\n  const array = Array(size)\r\n    .fill(0)\r\n    .map(() => getRandomInt(size * 5));\r\n  return array;\r\n};\r\n\r\nexport const createTrace = (array, sort) => {\r\n  const numbers = [...array];\r\n  let trace = [];\r\n  if (sort) {\r\n    trace = sort(numbers);\r\n  }\r\n  return trace;\r\n};\r\n","import \"./Navbar.css\";\r\nconst Navbar = (props) => {\r\n  const algoHandle = (event) => {\r\n    props.onAlgorithmChange(event.target.innerHTML);\r\n  };\r\n  const sizeHandle = (event) => {\r\n    const size = Number(event.target.innerHTML);\r\n    document.getElementById(\"progress_active\").style.width = \"0%\";\r\n    props.onArraySizeChange(size);\r\n  };\r\n\r\n  return (\r\n    <div id=\"navbar\" className=\"container-fluid\">\r\n      <div className=\"name mb-0 h2\">Sort Visualizer!</div>\r\n      <div id=\"controls\" className=\"container-fluid mt-3\">\r\n        <div className=\"dropdown putmargin\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn shadow-none dropdown-toggle navButtons\"\r\n            data-toggle=\"dropdown\">\r\n            {props.algo}\r\n          </button>\r\n          <ul className=\"dropdown-menu\">\r\n            <li className=\"dropdown-item\" onClick={algoHandle}>\r\n              Bubble Sort\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={algoHandle}>\r\n              Selection Sort\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={algoHandle}>\r\n              Insertion Sort\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={algoHandle}>\r\n              Merge Sort\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={algoHandle}>\r\n              Quick Sort\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={algoHandle}>\r\n              Quick(random)\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={algoHandle}>\r\n              Heap Sort\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"dropdown putmargin\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn shadow-none dropdown-toggle navButtons\"\r\n            data-toggle=\"dropdown\">\r\n            {props.arraySize}\r\n          </button>\r\n          <ul className=\"dropdown-menu dp-size\">\r\n            <li className=\"dropdown-item\" onClick={sizeHandle}>\r\n              10\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={sizeHandle}>\r\n              25\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={sizeHandle}>\r\n              50\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={sizeHandle}>\r\n              75\r\n            </li>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <li className=\"dropdown-item\" onClick={sizeHandle}>\r\n              100\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <button\r\n          id=\"random\"\r\n          type=\"button\"\r\n          className=\"btn shadow-none navButtons\"\r\n          onClick={props.onRandomize}>\r\n          Randomize!\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Navbar;\r\n","export const resetVisualState = (array) => {\r\n  return {\r\n    array,\r\n    originalArray: [...array],\r\n    sortedIndices: [],\r\n    groupA: [],\r\n    groupB: [],\r\n    groupC: [],\r\n    groupD: [],\r\n  };\r\n};\r\n\r\nexport const resetTraceState = (traceArray) => {\r\n  return { trace: traceArray, traceStep: -1 };\r\n};\r\n\r\nexport const clearTimeoutIds = (timeoutIds) => {\r\n  timeoutIds.forEach((id) => {\r\n    clearTimeout(id);\r\n  });\r\n  return [];\r\n};\r\n\r\n// export const changeVisualState=()=>{};\r\n","import React from \"react\";\r\nimport \"./Bar.css\";\r\n\r\nconst Bar = ({\r\n  width,\r\n  height,\r\n  val,\r\n  stateA,\r\n  stateB,\r\n  stateC,\r\n  stateD,\r\n  sorted,\r\n  style,\r\n}) => {\r\n  //console.log(\"Bar\");\r\n  let classNames = \"Bar\";\r\n  if (sorted) classNames += \" Bar_sorted\";\r\n  if (stateD) classNames += \" Bar_stateD\";\r\n  else if (stateC) classNames += \" Bar_stateC\";\r\n  else if (stateB) classNames += \" Bar_stateB\";\r\n  else if (stateA) classNames += \" Bar_stateA\";\r\n\r\n  let BarStyle = { ...style, width: `${width}%`, height: `${height}%` };\r\n  if (stateA || stateB || stateC || stateD) {\r\n    BarStyle[\"marginRight\"] = `${0.3 * width}%`;\r\n    BarStyle[\"marginLeft\"] = `${0.3 * width}% `;\r\n  }\r\n\r\n  return (\r\n    <div style={BarStyle} className={classNames}>\r\n      <span className=\"Bar__Text\">{val}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import \"./SortChart.css\";\r\nimport Bar from \"./Parts/Bar\";\r\n\r\nconst getListOfBars = (\r\n  numbers,\r\n  maxNum,\r\n  groupA,\r\n  groupB,\r\n  groupC,\r\n  groupD,\r\n  sortedIndices\r\n) => {\r\n  return numbers.map((num, i) => {\r\n    let width = 100 / numbers.length;\r\n    let height = (num / maxNum) * 100;\r\n    let stateA = groupA.includes(i);\r\n    let stateB = groupB.includes(i);\r\n    let stateC = groupC.includes(i);\r\n    let stateD = groupD.includes(i);\r\n    let sorted = sortedIndices.includes(i);\r\n\r\n    let margin = i === numbers.length ? \"0\" : width > 3 ? \"0.5rem\" : \"0.125rem\";\r\n    return (\r\n      <Bar\r\n        key={`${i}_${num}`}\r\n        width={width}\r\n        height={height}\r\n        val={width > 4 ? num : null}\r\n        stateA={stateA}\r\n        stateB={stateB}\r\n        stateC={stateC}\r\n        stateD={stateD}\r\n        sorted={sorted}\r\n        style={{ marginRight: `${margin}` }}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nconst SortChart = ({\r\n  numbers,\r\n  maxNum,\r\n  groupA,\r\n  groupB,\r\n  groupC,\r\n  groupD,\r\n  sortedIndices,\r\n}) => {\r\n  //console.log(numbers);\r\n  return (\r\n    <div className=\"SortChart\">\r\n      {getListOfBars(\r\n        numbers,\r\n        maxNum,\r\n        groupA,\r\n        groupB,\r\n        groupC,\r\n        groupD,\r\n        sortedIndices\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortChart;\r\n","export const CSS_CLASSES = {\r\n  ROOT: \"Button\",\r\n  ICON: \"Button__Icon\",\r\n  LABEL: \"Button__Label\",\r\n  DENSE: \"Button_dense\",\r\n  RAISED: \"Button_raised\",\r\n  OUTLINED: \"Button_outlined\",\r\n  UNELEVATED: \"Button_unelevated\",\r\n  UPPERCASE: \"Button_uppercase\",\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Button.css\";\r\nimport { CSS_CLASSES } from \"./constants\";\r\n\r\nfunction buildClassNames(rootClass, ClassMappings, userClassName) {\r\n  let classNames = `${userClassName}`;\r\n  Object.keys(ClassMappings).forEach((className) => {\r\n    if (ClassMappings[className]) {\r\n      classNames += ` ${className}`;\r\n    }\r\n  });\r\n  classNames += ` ${rootClass}`;\r\n  return classNames;\r\n}\r\n\r\nfunction renderIcon(icon, iconClass) {\r\n  const ICON = icon;\r\n  return <ICON className={`${CSS_CLASSES.ICON} ${iconClass}`} />;\r\n}\r\n\r\nconst Button = ({\r\n  className,\r\n  raised,\r\n  unelevated,\r\n  outlined,\r\n  dense,\r\n  notCased,\r\n  disabled,\r\n  icon,\r\n  iconClass,\r\n  href,\r\n  onClick,\r\n  children,\r\n}) => {\r\n  const classNames = buildClassNames(\r\n    CSS_CLASSES.ROOT,\r\n    {\r\n      [CSS_CLASSES.DENSE]: dense,\r\n      [CSS_CLASSES.RAISED]: raised,\r\n      [CSS_CLASSES.OUTLINED]: outlined,\r\n      [CSS_CLASSES.UNELEVATED]: unelevated,\r\n      [CSS_CLASSES.UPPERCASE]: !notCased,\r\n    },\r\n    className\r\n  );\r\n\r\n  if (href) {\r\n    return (\r\n      <a href={href} className={classNames} disabled={disabled}>\r\n        {icon ? renderIcon(icon, iconClass) : null}\r\n        <span className=\"Button__Label\">{children}</span>\r\n      </a>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <button onClick={onClick} className={classNames} disabled={disabled}>\r\n      {icon ? renderIcon(icon, iconClass) : null}\r\n      <span className=\"Button__Label\">{children}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  raised: PropTypes.bool,\r\n  unelevated: PropTypes.bool,\r\n  outlined: PropTypes.bool,\r\n  dense: PropTypes.bool,\r\n  notCased: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  href: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\r\n};\r\n\r\nexport default Button;\r\n","import { useEffect } from \"react\";\r\nimport {\r\n  MdPlayArrow as Play,\r\n  MdPause as Pause,\r\n  MdSkipNext as Forward,\r\n  MdSkipPrevious as Backward,\r\n  MdRepeat as Repeat,\r\n} from \"react-icons/md\";\r\nimport Button from \"./Parts/Button\";\r\nimport \"./VisualizerControls.css\";\r\n\r\nconst VisualizerControls = (props) => {\r\n  useEffect(() => {\r\n    if (!props.playing) document.getElementById(\"playback\").disabled = false;\r\n    else document.getElementById(\"playback\").disabled = true;\r\n  }, [props.playing]);\r\n\r\n  let playDisabled = false;\r\n  if (\r\n    (props.traceState.traceStep >= props.traceState.trace.length - 1 &&\r\n      props.traceState.traceStep !== -1) ||\r\n    props.traceState.trace.length <= 0\r\n  )\r\n    playDisabled = true;\r\n\r\n  let forwardDisabled = false;\r\n  if (props.traceState.traceStep >= props.traceState.trace.length - 1)\r\n    forwardDisabled = true;\r\n  let backwardDisabled = props.traceState.traceStep <= 0;\r\n  let repeatDisabled = props.traceState.traceStep <= 0;\r\n  const onRunHere = () => {\r\n    if (props.traceState.traceStep === -1) props.onRun(props.traceState.trace);\r\n    else props.onContinue();\r\n  };\r\n  const playblackHandler = (event) => {\r\n    const speed = event.target.innerHTML;\r\n    document.getElementById(\"playback\").innerHTML = speed;\r\n    props.onAdjustSpeed(speed);\r\n  };\r\n  return (\r\n    <div className=\"VisualizerControls\">\r\n      <Button\r\n        icon={Repeat}\r\n        onClick={props.onRepeat}\r\n        disabled={repeatDisabled}\r\n        className=\"VisualizerControls__Button\"\r\n      />\r\n\r\n      <Button\r\n        icon={Backward}\r\n        onClick={props.onBackward}\r\n        disabled={backwardDisabled}\r\n        iconClass=\"VisualizerControls__Icon\"\r\n        className=\"VisualizerControls__Button\"\r\n      />\r\n      <Button\r\n        icon={props.playing ? Pause : Play}\r\n        onClick={props.playing ? props.onPause : onRunHere}\r\n        disabled={playDisabled}\r\n        raised\r\n        iconClass=\"VisualizerControls__Icon\"\r\n        className=\"VisualizerControls__CenterButton\"\r\n      />\r\n      <Button\r\n        icon={Forward}\r\n        onClick={props.onForward}\r\n        disabled={forwardDisabled}\r\n        iconClass=\"VisualizerControls__Icon\"\r\n        className=\"VisualizerControls__Button\"\r\n      />\r\n      {/* <Menu\r\n        items={[\"0.25x\", \"0.5x\", \"1x\", \"2x\", \"4x\"]}\r\n        placeholder=\"Speed\"\r\n        selected={`${props.playbackSpeed}x`}\r\n        onSelect={props.onAdjustSpeed}\r\n        noDropIcon\r\n        className=\"VisualizerControls__SpeedButton\"\r\n      /> */}\r\n      <div className=\"dropdown\">\r\n        <button\r\n          id=\"playback\"\r\n          type=\"button\"\r\n          className=\"btn shadow-none\"\r\n          data-toggle=\"dropdown\">\r\n          {props.playbackSpeed.toString() + \"x\"}\r\n        </button>\r\n        <ul className=\"dropdown-menu\">\r\n          <li className=\"dropdown-item\" onClick={playblackHandler}>\r\n            0.25x\r\n          </li>\r\n          <div className=\"dropdown-divider\"></div>\r\n          <li className=\"dropdown-item\" onClick={playblackHandler}>\r\n            0.5x\r\n          </li>\r\n          <div className=\"dropdown-divider\"></div>\r\n          <li className=\"dropdown-item\" onClick={playblackHandler}>\r\n            1x\r\n          </li>\r\n          <div className=\"dropdown-divider\"></div>\r\n          <li className=\"dropdown-item\" onClick={playblackHandler}>\r\n            2x\r\n          </li>\r\n          <div className=\"dropdown-divider\"></div>\r\n          <li className=\"dropdown-item\" onClick={playblackHandler}>\r\n            4x\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisualizerControls;\r\n","import React from \"react\";\r\nimport \"./ProgressBar.css\";\r\n\r\nconst ProgressBar = ({ width }) => (\r\n  <div\r\n    id=\"progress_active\"\r\n    className=\"ProgressBar\"\r\n    style={{\r\n      width: `${width}%`,\r\n    }}>\r\n    {/* <div className=\"ProgressBar__Active\"></div> */}\r\n  </div>\r\n);\r\n\r\nexport default ProgressBar;\r\n","import \"./ColorKey.css\";\r\n\r\nconst ColorKey = ({ groupA, groupB, groupC, groupD }) => {\r\n  const keySorted =\r\n    groupA || groupB || groupC || groupD ? (\r\n      <div className=\"ColorKey__Item\">\r\n        <div className=\"ColorKey__Box ColorKey__Sorted\"></div>\r\n        <span>Sorted</span>\r\n      </div>\r\n    ) : (\r\n      <div className=\"ColorKey__Item\">\r\n        <div className=\"ColorKey__Box ColorKey__Unsorted\"></div>\r\n        <span>Unsorted</span>\r\n      </div>\r\n    );\r\n\r\n  const keyA = groupA ? (\r\n    <div className=\"ColorKey__Item\">\r\n      <div className=\"ColorKey__Box ColorKey__GroupA\"></div>\r\n      <span>{groupA}</span>\r\n    </div>\r\n  ) : null;\r\n\r\n  const keyB = groupB ? (\r\n    <div className=\"ColorKey__Item\">\r\n      <div className=\"ColorKey__Box ColorKey__GroupB\"></div>\r\n      <span>{groupB}</span>\r\n    </div>\r\n  ) : null;\r\n\r\n  const keyC = groupC ? (\r\n    <div className=\"ColorKey__Item\">\r\n      <div className=\"ColorKey__Box ColorKey__GroupC\"></div>\r\n      <span>{groupC}</span>\r\n    </div>\r\n  ) : null;\r\n\r\n  const keyD = groupD ? (\r\n    <div className=\"ColorKey__Item\">\r\n      <div className=\"ColorKey__Box ColorKey__GroupD\"></div>\r\n      <span>{groupD}</span>\r\n    </div>\r\n  ) : null;\r\n\r\n  return (\r\n    <div className=\"ColorKey\">\r\n      {keySorted}\r\n      {keyA}\r\n      {keyB}\r\n      {keyC}\r\n      {keyD}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorKey;\r\n","import React from \"react\";\r\nimport \"./SortInfo.css\";\r\n\r\nconst SortInfo = ({\r\n  title,\r\n  description,\r\n  worstCase,\r\n  avgCase,\r\n  bestCase,\r\n  space,\r\n}) => {\r\n  return (\r\n    <div className=\"SortInfo\">\r\n      <hr />\r\n      <h1>{title ? title : \"Select Algorithm\"}</h1>\r\n\r\n      <div className=\"SortInfo__Body\">\r\n        <article className=\"SortInfo__Article\">\r\n          {description ? (\r\n            description\r\n          ) : (\r\n            <p>\r\n              You must select an algorithm before you can visualize it's\r\n              execution on an array of numbers.\r\n            </p>\r\n          )}\r\n        </article>\r\n\r\n        <aside className=\"SortInfo__Aside\">\r\n          <h3>Performance</h3>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>Worst-case time complexity</td>\r\n                <td>\r\n                  <code>{worstCase}</code>\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>Average time complexity</td>\r\n                <td>\r\n                  <code>{avgCase}</code>\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>Best-case time complexity</td>\r\n                <td>\r\n                  <code>{bestCase}</code>\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>Worst-case space complexity</td>\r\n                <td>\r\n                  <code>{space}</code>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </aside>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortInfo;\r\n","import { useState, useEffect } from \"react\";\r\nimport { initialTraceState, initialVisualState } from \"../utilities/Constants\";\r\nimport \"./Visualizer.css\";\r\nimport {\r\n  resetVisualState,\r\n  resetTraceState,\r\n  clearTimeoutIds,\r\n} from \"../utilities/visualStates\";\r\nimport SortChart from \"./SortChart\";\r\nimport VisualizerControls from \"./VisualizerControls\";\r\nimport ProgressBar from \"./Parts/ProgressBar\";\r\nimport ColorKey from \"./ColorKey\";\r\nimport SortInfo from \"./SortInfo\";\r\n\r\nconst Visualizer = (props) => {\r\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\r\n  const [visualState, setVisualState] = useState(initialVisualState);\r\n  const [traceState, setTrace] = useState(initialTraceState);\r\n  const [timeoutIds, settimeoutIds] = useState([]);\r\n\r\n  //console.log(visualState);\r\n  useEffect(() => {\r\n    setVisualState(resetVisualState(props.array));\r\n    setTrace(resetTraceState(props.trace));\r\n    settimeoutIds(clearTimeoutIds(timeoutIds));\r\n  }, [props.array, props.trace]);\r\n\r\n  const changeVisualState = (item) => {\r\n    setVisualState((prevVisualState) => {\r\n      //console.log(\"here\");\r\n      return {\r\n        originalArray: prevVisualState.originalArray,\r\n        array: item.array,\r\n        groupA: item.groupA,\r\n        groupB: item.groupB,\r\n        groupC: item.groupC,\r\n        groupD: item.groupD,\r\n        sortedIndices: item.sortedIndices,\r\n      };\r\n    });\r\n  };\r\n\r\n  const run = (trace) => {\r\n    //take trace to enable continue function\r\n    const timeoutIds = [];\r\n    const timer = 250 / playbackSpeed;\r\n    console.log(\"run\");\r\n    trace.forEach((item, i) => {\r\n      let timeoutId = setTimeout(\r\n        (item) => {\r\n          setTrace((prevTrace) => {\r\n            return {\r\n              trace: prevTrace.trace,\r\n              traceStep: prevTrace.traceStep + 1,\r\n            };\r\n          });\r\n          changeVisualState(item);\r\n        },\r\n        i * timer,\r\n        item\r\n      );\r\n      timeoutIds.push(timeoutId);\r\n    });\r\n    let timeoutId = setTimeout(settimeoutIds([]), trace.length * timer);\r\n    timeoutIds.push(timeoutId);\r\n    settimeoutIds(timeoutIds);\r\n  };\r\n\r\n  const pause = () => {\r\n    settimeoutIds(clearTimeoutIds(timeoutIds));\r\n  };\r\n\r\n  const continuation = () => {\r\n    const trace = traceState.trace.slice(traceState.traceStep);\r\n    run(trace);\r\n  };\r\n\r\n  const stepForward = () => {\r\n    const trace = traceState.trace;\r\n    const step = traceState.traceStep;\r\n    if (step < trace.length - 1) {\r\n      const item = trace[step + 1];\r\n      setTrace((prevTrace) => {\r\n        return { trace: prevTrace.trace, traceStep: prevTrace.traceStep + 1 };\r\n      });\r\n      changeVisualState(item);\r\n    }\r\n  };\r\n\r\n  const stepBackward = () => {\r\n    const trace = traceState.trace;\r\n    const step = traceState.traceStep;\r\n    if (step > 0) {\r\n      const item = trace[step - 1];\r\n      setTrace((prevTrace) => {\r\n        return { trace: prevTrace.trace, traceStep: prevTrace.traceStep - 1 };\r\n      });\r\n      changeVisualState(item);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const playing = timeoutIds.length > 0;\r\n    if (playing) continuation();\r\n  }, [playbackSpeed]);\r\n  const adjustPlaybackSpeed = (speed) => {\r\n    pause();\r\n    const playSpeed = Number(speed.split(\"x\")[0]);\r\n    setPlaybackSpeed(playSpeed);\r\n  };\r\n  const repeat = () => {\r\n    document.getElementById(\"progress_active\").style.width = \"0%\";\r\n    settimeoutIds(clearTimeoutIds(timeoutIds));\r\n    setVisualState(resetVisualState(props.array));\r\n    setTrace(resetTraceState(props.trace));\r\n  };\r\n  return (\r\n    <div className=\"SortVisualizer\">\r\n      <SortChart\r\n        numbers={visualState.array}\r\n        maxNum={Math.max(...visualState.array)}\r\n        groupA={visualState.groupA}\r\n        groupB={visualState.groupB}\r\n        groupC={visualState.groupC}\r\n        groupD={visualState.groupD}\r\n        sortedIndices={visualState.sortedIndices}\r\n      />\r\n      <div className=\"ProgressBarOut\">\r\n        <ProgressBar\r\n          width={\r\n            traceState.trace.length > 0\r\n              ? (traceState.traceStep / (traceState.trace.length - 1)) * 100\r\n              : 0\r\n          }\r\n        />\r\n      </div>\r\n      <VisualizerControls\r\n        traceState={traceState}\r\n        onRun={run}\r\n        onContinue={continuation}\r\n        onPause={pause}\r\n        onForward={stepForward}\r\n        onBackward={stepBackward}\r\n        onRepeat={repeat}\r\n        onAdjustSpeed={adjustPlaybackSpeed}\r\n        playing={timeoutIds.length > 0}\r\n        playbackSpeed={playbackSpeed}\r\n      />\r\n      <ColorKey {...props.colorKey} />\r\n      <SortInfo {...props.desc} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Visualizer;\r\n","// import logo from \"./logo.svg\";\nimport { useState, useEffect } from \"react\";\nimport {\n  ALGORITHM,\n  ALGORITHM_KEY,\n  ALGORITHM_DESC,\n} from \"./utilities/Constants\";\nimport { initialState } from \"./utilities/Constants\";\nimport { generateRandomArray, createTrace } from \"./utilities/ArrayFunctions\";\nimport Navbar from \"./components/Navbar\";\nimport Visualizer from \"./components/Visualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  const [arraySize, setArraySize] = useState(initialState.arraySize);\n  const [array, setArray] = useState(initialState.array);\n  const [algo, setAlgo] = useState(\"Selection Sort\"); //useState(initialState.algorithm);\n  const [trace, setTrace] = useState(initialState.trace);\n\n  useEffect(() => {\n    const newArray = generateRandomArray(arraySize);\n    const trace = createTrace(newArray, ALGORITHM[algo]);\n    //setArraySize(arraySize);\n    //setAlgo(algo);\n    setArray(newArray);\n    setTrace(trace);\n  }, [arraySize, algo]);\n\n  const onAlgorithmChange = (algo) => {\n    setAlgo(algo);\n  };\n  const onArraySizeChange = (size) => {\n    setArraySize(size);\n  };\n  const onRandomize = () => {\n    const newArray = generateRandomArray(arraySize);\n    let trace = createTrace(newArray, ALGORITHM[algo]);\n    setArray(newArray);\n    setTrace(trace);\n  };\n\n  const colorKey = ALGORITHM_KEY[algo];\n  const desc = ALGORITHM_DESC[algo];\n\n  return (\n    <div className=\"theme\">\n      <Navbar\n        algo={algo}\n        onAlgorithmChange={onAlgorithmChange}\n        arraySize={arraySize}\n        onArraySizeChange={onArraySizeChange}\n        onRandomize={onRandomize}\n      />\n      <main className=\"body\">\n        <Visualizer\n          array={array}\n          trace={trace}\n          colorKey={colorKey}\n          desc={desc}></Visualizer>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}